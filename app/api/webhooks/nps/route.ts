import { NextRequest, NextResponse } from "next/server";
import { npsClient, npsConfig } from '@/utils/npsConfig';
import { fetchDataFromApi, updateUserBagWithPayment } from '@/utils/api';

interface NPSWebhookPayload {
  MerchantTxnId: string;
  GatewayTxnId: string;
}

interface CheckTransactionStatusRequest {
  MerchantId: string;
  MerchantName: string;
  MerchantTxnId: string;
  Signature: string;
}

interface CheckTransactionStatusResponse {
  code: string;
  message: string;
  data: {
    ProcessId: string;
    MerchantTxnId: string;
    GatewayReferenceNo: string;
    Amount: string;
    Status: string;
    Institution: string;
    Instrument: string;
    ServiceCharge: string;
    CbsMessage: string;
  };
}

interface NPSPaymentData {
  provider: string;
  processId: string;
  merchantTxnId: string;
  gatewayReferenceNo?: string;
  amount: number;
  status: string;
  institution?: string;
  instrument?: string;
  serviceCharge?: string;
  cbsMessage?: string;
  timestamp: string;
  webhook_processed: boolean;
  authUserId?: string;
}

function generateLocalTimestamp(): string {
  return new Date().toISOString();
}

export async function GET(request: NextRequest) {
  try {
    console.log('=== NPS WEBHOOK RECEIVED ===');
    
    const { searchParams } = new URL(request.url);
    const MerchantTxnId = searchParams.get('MerchantTxnId');
    const GatewayTxnId = searchParams.get('GatewayTxnId');

    console.log('Query params:', { MerchantTxnId, GatewayTxnId });

    // Validate required parameters
    if (!MerchantTxnId || !GatewayTxnId) {
      console.error('Missing required webhook parameters');
      return new Response('Missing required parameters', { 
        status: 400,
        headers: { 'Content-Type': 'text/plain' }
      });
    }

    const merchantTxnId = MerchantTxnId;
    const gatewayTxnId = GatewayTxnId;

    console.log(`Processing webhook for merchant transaction: ${merchantTxnId}, gateway transaction: ${gatewayTxnId}`);

    // STEP 1: Verify transaction status with NPS
    console.log('=== VERIFYING TRANSACTION WITH NPS ===');
    const statusRequest: CheckTransactionStatusRequest = {
      MerchantId: npsConfig.merchantId,
      MerchantName: npsConfig.merchantName,
      MerchantTxnId: merchantTxnId,
      Signature: "" // Will be generated by interceptor
    };

    const statusResponse = await npsClient.post<CheckTransactionStatusResponse>(
      '/CheckTransactionStatus',
      statusRequest
    );

    console.log('NPS Transaction verification response:', statusResponse.data);

    if (statusResponse.data.code !== "0") {
      console.error('Transaction verification failed with NPS:', statusResponse.data);
      return new Response('Transaction verification failed', { 
        status: 400,
        headers: { 'Content-Type': 'text/plain' }
      });
    }

    const transactionData = statusResponse.data.data;
    console.log('✅ Transaction verified with NPS:', {
      status: transactionData.Status,
      amount: transactionData.Amount,
      gatewayRef: transactionData.GatewayReferenceNo
    });

    // STEP 2: Find the user who made this payment by searching user bags
    console.log('=== FINDING USER BY PAYMENT ===');
    console.log('Searching for payment with merchant transaction ID:', merchantTxnId);
    
    try {
      // Search for user bags that contain this payment
      const userBagsResponse = await fetchDataFromApi(
        `/api/user-bags?populate=*`
      );

      if (!userBagsResponse?.data || userBagsResponse.data.length === 0) {
        console.error('⚠️ No user bags found in system');
        console.log('✅ Transaction verified with NPS but no user bags found');
        console.log('Acknowledging webhook to prevent retries');
        
        return new Response('received', { 
          status: 200,
          headers: { 'Content-Type': 'text/plain' }
        });
      }

      // Find the user bag that contains this payment
      let targetUserBag: any = null;
      for (const bag of userBagsResponse.data) {
        if (bag.user_orders?.payments) {
          const payment = bag.user_orders.payments.find((p: any) => 
            p.merchantTxnId === merchantTxnId || 
            p.gatewayReferenceNo === transactionData.GatewayReferenceNo
          );
          if (payment) {
            targetUserBag = bag;
            console.log('✅ Found payment in user bag:', bag.documentId);
            break;
          }
        }
      }

      if (!targetUserBag) {
        console.error('⚠️ Payment not found in any user bag:', merchantTxnId);
        console.log('✅ Transaction verified with NPS but payment not found in user bags');
        console.log('Acknowledging webhook to prevent retries');
        
        return new Response('received', { 
          status: 200,
          headers: { 'Content-Type': 'text/plain' }
        });
      }

      // STEP 3: Check if this transaction has already been processed
      const existingPayments = targetUserBag.user_orders?.payments || [];
      const existingPayment = existingPayments.find((payment: any) => 
        payment.merchantTxnId === merchantTxnId && payment.webhook_processed === true
      );

      if (existingPayment) {
        console.log('✅ Transaction already processed by webhook:', merchantTxnId);
        
        return new Response('already received', { 
          status: 200,
          headers: { 'Content-Type': 'text/plain' }
        });
      }

      // STEP 4: Save payment data to user-bag
      console.log('=== SAVING PAYMENT DATA ===');
      const paymentData: NPSPaymentData = {
        provider: "nps",
        processId: transactionData.ProcessId,
        merchantTxnId: transactionData.MerchantTxnId,
        gatewayReferenceNo: transactionData.GatewayReferenceNo,
        amount: parseFloat(transactionData.Amount),
        status: transactionData.Status,
        institution: transactionData.Institution,
        instrument: transactionData.Instrument,
        serviceCharge: transactionData.ServiceCharge,
        cbsMessage: transactionData.CbsMessage,
        timestamp: generateLocalTimestamp(),
        webhook_processed: true,
        // Note: authUserId will be preserved from the original payment data
      };

      await updateUserBagWithPayment(targetUserBag.documentId, paymentData);
      
      console.log('✅ Webhook payment data saved successfully:', paymentData);

    } catch (dbError: any) {
      console.error('⚠️ Database error during webhook processing:', dbError);
      console.log('✅ Transaction verified with NPS but database operation failed');
      console.log('Acknowledging webhook to prevent retries');
    }

    // STEP 5: Always acknowledge the webhook to NPS
    console.log('✅ Sending acknowledgment to NPS');
    
    return new Response('received', { 
      status: 200,
      headers: { 'Content-Type': 'text/plain' }
    });

  } catch (error: any) {
    console.error('❌ Webhook processing error:', error);
    console.error('Error stack:', error.stack);
    
    // Even if there's an error, we should acknowledge to prevent infinite retries
    // unless it's a critical NPS verification error
    if (error.response?.status === 401 || error.response?.status === 403) {
      console.error('❌ NPS authentication error - not acknowledging');
      return new Response('Authentication error', { 
        status: 500,
        headers: { 'Content-Type': 'text/plain' }
      });
    }
    
    console.log('⚠️ Error occurred but acknowledging webhook to prevent retries');
    return new Response('received', { 
      status: 200,
      headers: { 'Content-Type': 'text/plain' }
    });
  }
} 