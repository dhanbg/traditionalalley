import type { NextApiRequest, NextApiResponse } from 'next';
import { npsClient, npsConfig } from '../../utils/npsConfig';
import { fetchDataFromApi, updateUserBagWithPayment } from '../../utils/api';
const { generateLocalTimestamp } = require('../../utils/timezone');
import type { 
  NPSWebhookPayload, 
  NPSPaymentData,
  CheckTransactionStatusRequest,
  CheckTransactionStatusResponse
} from '../../types/nps';

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // NPS sends GET requests with query parameters for webhook notifications
  if (req.method !== 'GET') {
    return res.status(405).send('Method not allowed');
  }

  try {
    console.log('=== NPS WEBHOOK RECEIVED ===');
    console.log('Query params:', req.query);
    console.log('Headers:', req.headers);

    const { MerchantTxnId, GatewayTxnId } = req.query;

    // Validate required parameters
    if (!MerchantTxnId || !GatewayTxnId) {
      console.error('Missing required webhook parameters');
      return res.status(400).send('Missing required parameters');
    }

    const merchantTxnId = MerchantTxnId as string;
    const gatewayTxnId = GatewayTxnId as string;

    console.log(`Processing webhook for merchant transaction: ${merchantTxnId}, gateway transaction: ${gatewayTxnId}`);

    // STEP 1: Verify transaction status with NPS (as per documentation)
    console.log('=== VERIFYING TRANSACTION WITH NPS ===');
    const statusRequest: CheckTransactionStatusRequest = {
      MerchantId: npsConfig.merchantId,
      MerchantName: npsConfig.merchantName,
      MerchantTxnId: merchantTxnId,
      Signature: "" // Will be generated by interceptor
    };

    const statusResponse = await npsClient.post<CheckTransactionStatusResponse>(
      '/CheckTransactionStatus',
      statusRequest
    );

    console.log('NPS Transaction verification response:', statusResponse.data);

    if (statusResponse.data.code !== "0") {
      console.error('Transaction verification failed with NPS:', statusResponse.data);
      return res.status(400).send('Transaction verification failed');
    }

    const transactionData = statusResponse.data.data;
    console.log('✅ Transaction verified with NPS:', {
      status: transactionData.Status,
      amount: transactionData.Amount,
      gatewayRef: transactionData.GatewayReferenceNo
    });

    // STEP 2: Extract user ID from merchant transaction ID (only after NPS verification)
    let userId: string | null = null;
    
    console.log('=== EXTRACTING USER ID ===');
    console.log('Parsing merchant transaction ID:', merchantTxnId);
    
    if (merchantTxnId.startsWith('TXN-')) {
      const parts = merchantTxnId.split('-');
      console.log('Transaction ID parts:', parts);
      
      if (parts.length >= 3) {
        // Format: TXN-{timestamp}-{userId}
        userId = parts.slice(2).join('-'); // Join remaining parts in case userId contains dashes
        console.log('Extracted user ID:', userId);
      }
    }

    // STEP 3: If we can't identify the user, still acknowledge the webhook
    // This prevents NPS from retrying, but log the issue for manual review
    if (!userId) {
      console.error('⚠️ Could not extract user ID from merchant transaction ID:', merchantTxnId);
      console.error('Expected format: TXN-{timestamp}-{userId}');
      console.log('✅ Transaction verified with NPS but user identification failed');
      console.log('Acknowledging webhook to prevent retries');
      return res.status(200).send('received');
    }

    // STEP 4: Find the user's bag (only if user ID was extracted)
    console.log('=== LOOKING UP USER DATA ===');
    console.log('Looking up user data for user ID:', userId);
    
    try {
      const currentUserData = await fetchDataFromApi(
        `/api/user-datas?filters[clerkUserId][$eq]=${userId}&populate=user_bag`
      );

      if (!currentUserData?.data || currentUserData.data.length === 0) {
        console.error('⚠️ User data not found for user:', userId);
        console.log('✅ Transaction verified with NPS but user not found in database');
        console.log('Acknowledging webhook to prevent retries');
        return res.status(200).send('received');
      }

      const userData = currentUserData.data[0];
      const userBag = userData.user_bag;

      if (!userBag || !userBag.documentId) {
        console.error('⚠️ User bag not found for user:', userId);
        console.log('✅ Transaction verified with NPS but user bag not found');
        console.log('Acknowledging webhook to prevent retries');
        return res.status(200).send('received');
      }

      console.log('✅ Found user bag:', userBag.documentId);

      // STEP 5: Check if this transaction has already been processed
      const existingPayments = userBag.payments || [];
      const existingPayment = existingPayments.find((payment: any) => 
        payment.merchantTxnId === merchantTxnId || 
        payment.gatewayReferenceNo === transactionData.GatewayReferenceNo
      );

      if (existingPayment) {
        console.log('✅ Transaction already processed:', merchantTxnId);
        return res.status(200).send('already received');
      }

      // STEP 6: Save payment data to user-bag
      console.log('=== SAVING PAYMENT DATA ===');
      const paymentData: NPSPaymentData = {
        provider: "nps",
        processId: transactionData.ProcessId,
        merchantTxnId: transactionData.MerchantTxnId,
        gatewayReferenceNo: transactionData.GatewayReferenceNo,
        amount: parseFloat(transactionData.Amount),
        status: transactionData.Status,
        transactionDate: transactionData.TransactionDate,
        institution: transactionData.Institution,
        instrument: transactionData.Instrument,
        serviceCharge: transactionData.ServiceCharge,
        cbsMessage: transactionData.CbsMessage,
        timestamp: generateLocalTimestamp(),
        webhook_processed: true, // Flag to indicate this came from webhook
      };

      await updateUserBagWithPayment(userBag.documentId, paymentData);
      
      console.log('✅ Webhook payment data saved successfully:', paymentData);

    } catch (dbError: any) {
      console.error('⚠️ Database error during webhook processing:', dbError);
      console.log('✅ Transaction verified with NPS but database operation failed');
      console.log('Acknowledging webhook to prevent retries');
    }

    // STEP 7: Always acknowledge the webhook to NPS
    // NPS expects plain text response "received" for first time
    console.log('✅ Sending acknowledgment to NPS');
    return res.status(200).send('received');

  } catch (error: any) {
    console.error('❌ Webhook processing error:', error);
    console.error('Error stack:', error.stack);
    
    // Even if there's an error, we should acknowledge to prevent infinite retries
    // unless it's a critical NPS verification error
    if (error.response?.status === 401 || error.response?.status === 403) {
      console.error('❌ NPS authentication error - not acknowledging');
      return res.status(500).send('Authentication error');
    }
    
    console.log('⚠️ Error occurred but acknowledging webhook to prevent retries');
    return res.status(200).send('received');
  }
} 