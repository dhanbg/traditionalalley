import type { NextApiRequest, NextApiResponse } from 'next';
import { npsClient, npsConfig } from '../../utils/npsConfig';
import { fetchDataFromApi, updateUserBagWithPayment } from '../../utils/api';
const { generateLocalTimestamp } = require('../../utils/timezone');
import type { 
  NPSWebhookPayload, 
  NPSPaymentData,
  CheckTransactionStatusRequest,
  CheckTransactionStatusResponse
} from '../../types/nps';

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // NPS sends GET requests with query parameters for webhook notifications
  if (req.method !== 'GET') {
    return res.status(405).send('Method not allowed');
  }

  try {
    console.log('=== NPS WEBHOOK RECEIVED ===');
    console.log('Query params:', req.query);
    console.log('Headers:', req.headers);

    const { MerchantTxnId, GatewayTxnId } = req.query;

    // Validate required parameters
    if (!MerchantTxnId || !GatewayTxnId) {
      console.error('Missing required webhook parameters');
      return res.status(400).send('Missing required parameters');
    }

    const merchantTxnId = MerchantTxnId as string;
    const gatewayTxnId = GatewayTxnId as string;

    console.log(`Processing webhook for merchant transaction: ${merchantTxnId}, gateway transaction: ${gatewayTxnId}`);

    // Verify transaction status with NPS
    const statusRequest: CheckTransactionStatusRequest = {
      MerchantId: npsConfig.merchantId,
      MerchantName: npsConfig.merchantName,
      MerchantTxnId: merchantTxnId,
      Signature: "" // Will be generated by interceptor
    };

    const statusResponse = await npsClient.post<CheckTransactionStatusResponse>(
      '/CheckTransactionStatus',
      statusRequest
    );

    console.log('Transaction verification response:', statusResponse.data);

    if (statusResponse.data.code !== "0") {
      console.error('Transaction verification failed:', statusResponse.data);
      return res.status(400).send('Transaction verification failed');
    }

    const transactionData = statusResponse.data.data;

    // Extract user ID from merchant transaction ID
    // Expected format: order-{productId}-{timestamp}-{userId}
    let userId: string | null = null;
    const orderIdParts = merchantTxnId.split('-');
    if (orderIdParts.length >= 4) {
      userId = orderIdParts[orderIdParts.length - 1]; // Last part should be user ID
    }

    if (!userId) {
      console.error('Could not extract user ID from merchant transaction ID:', merchantTxnId);
      return res.status(400).send('Could not identify user');
    }

    // Find the user's bag
    const currentUserData = await fetchDataFromApi(
      `/api/user-datas?filters[clerkUserId][$eq]=${userId}&populate=user_bag`
    );

    if (!currentUserData?.data || currentUserData.data.length === 0) {
      console.error('User data not found for user:', userId);
      return res.status(404).send('User not found');
    }

    const userData = currentUserData.data[0];
    const userBag = userData.user_bag;

    if (!userBag || !userBag.documentId) {
      console.error('User bag not found for user:', userId);
      return res.status(404).send('User bag not found');
    }

    console.log('Found user bag:', userBag.documentId);

    // Prepare payment data for storage
    const paymentData: NPSPaymentData = {
      provider: "nps",
      processId: transactionData.ProcessId,
      merchantTxnId: transactionData.MerchantTxnId,
      gatewayReferenceNo: transactionData.GatewayReferenceNo,
      amount: parseFloat(transactionData.Amount),
      status: transactionData.Status,
      transactionDate: transactionData.TransactionDate,
      institution: transactionData.Institution,
      instrument: transactionData.Instrument,
      serviceCharge: transactionData.ServiceCharge,
      cbsMessage: transactionData.CbsMessage,
      timestamp: generateLocalTimestamp(),
      webhook_processed: true, // Flag to indicate this came from webhook
    };

    // Save payment data to user-bag
    await updateUserBagWithPayment(userBag.documentId, paymentData);
    
    console.log('✅ Webhook payment data saved successfully:', paymentData);

    // Respond to NPS that webhook was processed successfully
    // NPS expects plain text response
    return res.status(200).send('received');

  } catch (error: any) {
    console.error('❌ Webhook processing error:', error);
    
    // For subsequent webhook calls for the same transaction
    if (error.message && error.message.includes('already')) {
      return res.status(200).send('already received');
    }
    
    return res.status(500).send('Internal server error');
  }
} 